
三. struct模块的使用
    1. 原理： 将一组简单数据进行打包，转换为bytes格式发送。或者将一组bytes格式数据，进行解析。

	2. 接口使用

    【1】 Struct(fmt)
					功能: 生成结构化对象
					参数：fmt  定制的数据结构

					    e.g.  要发送数据  1   b'zhangsan'   1.75
							      fmt参数    "i8sf"

    【2】 st.pack(v1,v2,v3....)
					功能: 将一组数据按照指定格式打包转换为bytes
					参数：要打包的数据
					返回值： bytes字节串

    【3】 st.unpack(bytes_data)
					功能： 将bytes字节串按照指定的格式解析
					参数： 要解析的字节串
					返回值： 解析后的内容

    【4】 struct.pack(fmt,v1,v2,v3...)
					struct.unpack(fmt,bytes_data)

					说明： 可以使用struct模块直接调用pack unpack。此时这两函数第一个参数传入fmt。其他用法功能相同


四. 本地套接字

  1. 功能 ： 用于本地两个程序之间进行数据的收发

	2. 套接字文件 ：用于本地套接字之间通信时，进行数据传输的介质。

	3. 创建本地套接字流程
	    【1】 创建本地套接字
				sockfd = socket(AF_UNIX,SOCK_STREAM)

	    【2】 绑定本地套接字文件
				sockfd.bind(file)

		【3】 监听，接收客户端连接，消息收发
				listen()-->accept()-->recv(),send()


cookie ： linux下文件类型

  b(块设备文件)   c(字符设备文件)   d(目录)   -(普通文件)
	l(链接文件)     s(套接字文件)     p(管道文件)


五. 多任务编程
    1. 意义： 充分利用计算机多核资源，提高程序的运行效率
    2. 实现方案 ：多进程 ， 多线程
	3. 并行，并发概念
        * 并发 ： 同时处理多个任务，内核在任务间不断的切换达到好像多个任务被同时执行的效果，实际每个时刻只有一个任务占有内核。
		* 并行 ： 多个任务利用计算机多核资源在同时执行，此时多个任务间为并行关系。

六. 进程（process）
		1. 定义 ： 程序在计算机中的一次运行。
            * 程序是一个可执行的文件，是静态的占有磁盘。
            * 进程是一个动态的过程描述，占有计算机运行资源，有一定的生命周期。


		2. 如何产生一个进程
		    【1】 用户空间通过调用程序接口或者命令发起请求
			【2】 操作系统接收用户请求，开始创建进程
			【3】 操作系统调配计算机资源，确定进程状态等
			【4】 操作系统将创建的进程提供给用户使用

		3. 进程概念

			* cpu时间片：如果一个进程占有cpu内核则称这个进程在cpu时间片上。

			* PCB(进程控制块)：在内存中开辟的一块空间，用于存放进程的基本信息，也用于系统查找识别进程。

			* 进程ID（PID）： 系统为每个进程分配的一个大于0的整数，作为进程ID。每个进程ID不重复。

			  Linux查看进程ID ： ps -aux

			* 父子进程 ： 系统中每一个进程(除了系统初始化进程)都有唯一的父进程，可以有0个或多个子进程。父子进程关系便于进程管理。

			  查看进程树： pstree

			* 进程状态

			  三态
				  就绪态 ： 进程具备执行条件，等待分配cpu资源
					运行态 ： 进程占有cpu时间片正在运行
					等待态 ： 进程暂时停止运行，让出cpu

				五态
				  新建 ： 创建一个进程，获取资源的过程
					终止 ： 进程结束，释放资源的过程


				状态查看命令 ： ps -aux  --> STAT列

				  S 等待态
					R 执行态
					D 等待态
					T 等待态
					Z 僵尸

					<  有较高优先级
					N  优先级较低
					+  前台进程
					s  会话组组长
					l  有多线程的

面试要求： 1. 什么是进程，进程和程序有什么区别
          2. 进程有哪些状态，状态之间如何转化












