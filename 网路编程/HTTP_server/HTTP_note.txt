HTTP协议 （超文本传输协议）

用途 ： 网页获取，数据的传输
特点 ：* 应用层协议，传输层使用tcp传输
            * 简单，灵活，很多语言都有HTTP专门接口
            * 无状态，协议不记录传输内容
            * http1.1 支持持久连接，丰富了请求类型

网页请求过程
    1. 客户端（浏览器）通过tcp传输，发送http请求给服务端
    2. 服务端接收到http请求后进行解析
    3. 服务端处理请求内容，组织响应内容
    4. 服务端将响应内容以http响应格式发送给浏览器
    5. 浏览器接收到响应内容，解析展示

HTTP 请求
    1. 格式
        * 请求行:  GET / HTTP/1.1\r\n
        * 请求头:  Host: 127.0.0.1:8000\r\nConnection: keep-alive\r\n......\r\n
        * 空行:    \r\n
        * 请求体   ...
    2. 请求头:  具体的请求类别和请求内容

        GET         /        HTTP/1.1
        请求类别   请求内容     协议版本

        * 请求类别:
            GET :        获取网络资源
            POST ：      提交一定的信息，得到反馈

            HEAD ：      只获取网络资源的响应头(只获取简介)
            PUT ：       更新服务器资源
            DELETE ：    删除服务器资源

            CONNECT:     预留的,暂时没用
            TRACE ：     测试
            OPTIONS ：   获取服务器性能信息

        * 请求内容:  请求的具体域名

        * 协议版本:  固定的 1.1


    3. 请求头 :  对请求的进一步解释和描述
        格式: 键值对形式, 每个请求头都占一行

    4. 空行 :  划分请求头和请求体用的就是个单纯的空行

    5. 请求体: 请求参数或者提交内容

    6. 实例代码:
        b'GET / HTTP/1.1\r\n        ----> 请求行
        Host: 127.0.0.1:8000\r\n
        Connection: keep-alive\r\n      -----> 请求头 (每个以 \r\n 分隔)
        Upgrade-Insecure-Requests: 1\r\n
        User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36\r\n
        Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8\r\n
        Accept-Encoding: gzip, deflate, br\r\n
        Accept-Language: zh-CN,zh;q=0.9\r\n
        \r\n'       ------> 空行 (隔开 请求头和请求体)
                    ------> 请求体 (这是没有请求体的情况下所以没显示)

HTTP 响应
    1. 响应格式：
        * 响应行:      HTTP/1.1  200  OK\r\n
        * 响应头:      Content-Encodeing: gzip\r\nContent-Type: text/html\r\n...\r\n
        * 空行:       \r\n
        * 响应体:      <h1>hello world</h1>

    2. 响应行 ： 反馈基本的响应情况
            HTTP/1.1     200       OK
            版本信息    响应码   附加信息

            响应码 ：
                1xx  提示信息，表示请求被接收
                2xx  响应成功
                3xx  响应需要进一步操作，重定向
                4xx  客户端错误
                5xx  服务器错误

    3. 响应头：对响应内容的描述

    4. 响应体：响应的主体内容信息

    5. 实例:
        data = '''HTTP/1.1  200  OK
        Content-Encodeing: gzip
        Content-Type: text/html

        <h1>hello world</h1>
        '''
        c.send(data.encode())

